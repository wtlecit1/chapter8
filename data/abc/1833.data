{'TMP': 'C:\\Users\\wtlecit\\AppData\\Local\\Temp', 'GOPATH': 'C:\\Go\\workspace', 'COMPUTERNAME': 'DESKTOP-9OUGQVC', 'CURL_HOME': 'C:\\web\xb2\xce\xcd\xb8\\Lcx-curl\\curl.exe', 'PYTHONIOENCODING': 'utf8', 'GOROOT': 'C:\\Go\\', 'NLS_LANG': 'SIMPLIFIED CHINESE_CHINA.ZHS16GBK', 'GOBIN': 'c:\\go\\bin', 'PSMODULEPATH': 'C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 61 Stepping 4, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3d04', 'PATH': 'C:\\app\\oracle\\product\\12.1.0\\client_1\\bin;C:\\app\\oracle\\product\\12.1.0\\dbhome_1\\bin;C:\\app\\oracle\\product\\12.1.0\\dbhome_4\\bin;C:\\app\\oracle\\product\\12.1.0\\dbhome_3\\bin;C:\\app\\oracle\\product\\12.1.0\\dbhome_2\\bin;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Python27;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\software\\Python27;C:\\Users\\wtlecit\\AppData\\Local\\Programs\\Python\\Python35\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Java\\jdk1.7.0_79\\bin;C:\\web\xb2\xce\xcd\xb8\\Lcx-curl;C;\\Program Files (x86)\\IDM Computer Solutions\\UltraCompare;C:\\Program Files (x86)\\GtkSharp\\2.12\\bin;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Go\\bin;c:\\go\\bin;C:\\Subversion\\bin;C:\\TortoiseSVN\\bin;C:\\software\\Python27\\Lib\\site-packages\\nmap-7.12;C:\\data\\db\\bin;C:\\Python27\\Scripts;C:\\android\\adt-bundle-windows-x64\\android-sdk-windows\\tools;C:\\android\\adt-bundle-windows-x64\\android-sdk-windows\\platform-tools;C:\\Cocos\\Cocos2d-x\\Cocos2d-x-3.10\\templates;C:\\Cocos\\Cocos2d-x\\Cocos2d-x-3.10\\tools\\cocos2d-console\\bin;C:\\Program Files\\Java\\jdk1.7.0_79\\\\bin;C:\\Program Files (x86)\\w3af;C:\\Users\\wtlecit\\Downloads\\apache-tomcat-6.0.16\\bin;C:\\Subversion\\bin;C:\\software\\Python27\\Lib\\site-packages\\nmap-7.12;C:\\software\\Oracle\\VirtualBox; C:\\Python27\\Scripts', 'SYSTEMROOT': 'C:\\WINDOWS', 'CATALINA_HOME': 'C:\\Users\\wtlecit\\Downloads\\apache-tomcat-6.0.16', 'CLASSPATH': 'C:\\Program Files\\Java\\jdk1.7.0_79\\\\lib\\dt.jar;C:\\Program Files\\Java\\jdk1.7.0_79\\\\lib\\tools.jar;', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COCOS_X_ROOT': 'C:\\Cocos\\Cocos2d-x', 'COCOS_TEMPLATES_ROOT': 'C:\\Cocos\\Cocos2d-x\\Cocos2d-x-3.10\\templates', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'USERDOMAIN': 'DESKTOP-9OUGQVC', 'PROCESSOR_ARCHITECTURE': 'x86', 'COCOS_CONSOLE_ROOT': 'C:\\Cocos\\Cocos2d-x\\Cocos2d-x-3.10\\tools\\cocos2d-console\\bin', 'APR_ICONV_PATH': 'C:\\Subversion\\iconv', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'PYDEV_CONSOLE_ENCODING': 'utf8', 'GOARCH': 'amd64', 'LOCALAPPDATA': 'C:\\Users\\wtlecit\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\wtlecit', 'ORACLE_SID': 'orcl1', 'VS120COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\Tools\\', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.7.0_79\\', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'wtlecit', 'LOGONSERVER': '\\\\DESKTOP-9OUGQVC', 'PROMPT': '$P$G', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'C:\\Users\\wtlecit\\Downloads\\eclipse-jee-mars-1-win32-x86_64\\eclipse\\plugins\\org.python.pydev_1.6.3.2010100513\\PySrc\\pydev_sitecustomize;C:\\Users\\wtlecit\\workspace\\chapter7\\src;C:\\Python27;C:\\Python27\\DLLs;C:\\Python27\\lib;C:\\Python27\\lib\\lib-tk;C:\\Python27\\lib\\plat-win;C:\\Python27\\lib\\site-packages;C:\\Python27\\lib\\site-packages\\dbutils-1.1-py2.7.egg;C:\\Python27\\lib\\site-packages\\hackhttp-1.0.4.4-py2.7.egg;C:\\Python27\\lib\\site-packages\\pcapy-0.10.10-py2.7-win32.egg;C:\\Python27\\lib\\site-packages\\pip-9.0.1-py2.7.egg;C:\\Python27\\lib\\site-packages\\pymongo-3.3.0-py2.7-win32.egg', 'ONEDRIVE': 'C:\\Users\\wtlecit\\OneDrive', 'QUICK_V3_ROOT': 'C:\\cocos\\quick-cocos2d-x-3.2rc1\\', 'GOOS': 'windows', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'CONFIGSETROOT': 'C:\\WINDOWS\\ConfigSetRoot', 'WINDIR': 'C:\\WINDOWS', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-9OUGQVC', 'TEMP': 'C:\\Users\\wtlecit\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'GTK_BASEPATH': 'C:\\Program Files (x86)\\GtkSharp\\2.12\\', 'SYSTEMDRIVE': 'C:', 'PYDEV_COMPLETER_PYTHONPATH': 'C:\\Users\\wtlecit\\Downloads\\eclipse-jee-mars-1-win32-x86_64\\eclipse\\plugins\\org.python.pydev_1.6.3.2010100513\\PySrc', 'VS110COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\wtlecit\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\wtlecit'}